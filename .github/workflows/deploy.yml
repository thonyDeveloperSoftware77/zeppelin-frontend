name: Build and Deploy via Coolify

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Verificar runner activo
        run: |
          echo "üè† Runner en uso: $(hostname)"
          echo "üë§ Usuario actual: $(whoami)"
          echo "üõ§Ô∏è PATH actual: $PATH"
          echo "üîç Bun se encuentra en: $(which bun || echo 'No encontrado')"
        shell: bash


      # 1Ô∏è‚É£ Checkout del c√≥digo
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main


      # 2Ô∏è‚É£ Instalar dependencias con Bun
      - name: Install dependencies with Bun
        run: |
          bun install

      # 3Ô∏è‚É£ Construir el proyecto
      - name: Build project
        run: |
          bun run build

      # 4Ô∏è‚É£ Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 5Ô∏è‚É£ Log in en GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # 6Ô∏è‚É£ Construir y empujar la imagen a GHCR con el tag correcto
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/jaimendo99/zeppelin-frontend:latest
            ghcr.io/jaimendo99/zeppelin-frontend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build]  # ‚ö†Ô∏è Aseg√∫rate de que el job de build se llama "build"
    steps:
      # 7Ô∏è‚É£ Notificar a Coolify para que haga el despliegue
      - name: Notify deployment via Coolify
        run: |
          curl -X GET "http://62.146.226.103:8000/api/v1/deploy?uuid=${{ secrets.RESOURCE_UUID }}&force=false" \
          -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}"
